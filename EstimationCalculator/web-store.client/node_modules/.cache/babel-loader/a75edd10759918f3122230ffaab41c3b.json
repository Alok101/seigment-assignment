{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\siemens-app-estimation\\\\EstimationCalculator\\\\web-store.client\\\\src\\\\components\\\\PriceCalculator\\\\Estimation.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { getCustomerDetails } from \"../../common/token.js\";\nimport { PrinttoFile, PrinttoPaper } from './EstimationAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Estimation = () => {\n  _s();\n\n  const customerDetails = getCustomerDetails();\n  const discountItem = customerDetails.discountRule;\n  const apiModel = {\n    customerId: '',\n    customerType: '',\n    discountPercentage: '',\n    totalAmountAfterDiscount: '',\n    itemDetails: {\n      price: '',\n      weight: '',\n      totalPrice: ''\n    }\n  };\n  const [estimattedItem, setEstimattedItem] = useState(apiModel);\n\n  const handlePriceInput = event => {\n    setEstimattedItem(prev => ({\n      itemDetails: { ...prev.itemDetails,\n        price: event.target.value,\n        totalPrice: calculateTotalPrice(event.target.value, estimattedItem.itemDetails.weight)\n      }\n    }));\n  };\n\n  const handleWeightInput = event => {\n    setEstimattedItem(prev => ({\n      itemDetails: { ...prev.itemDetails,\n        weight: event.target.value,\n        totalPrice: calculateTotalPrice(event.target.value, estimattedItem.itemDetails.price)\n      }\n    }));\n  };\n\n  const handleOperation = async actionType => {\n    const permissionToGetDiscount = customerDetails.discountRule.applicable;\n    const totalAmountAfterDiscount = permissionToGetDiscount ? calculateDiscountPrice() : estimattedItem.itemDetails.totalprice;\n    estimattedItem.customerId = customerDetails === null || customerDetails === void 0 ? void 0 : customerDetails.id;\n    estimattedItem.customerType = customerDetails === null || customerDetails === void 0 ? void 0 : customerDetails.type;\n    estimattedItem.discountPercentage = customerDetails.discountRule.pricePercentage;\n    estimattedItem.totalAmountAfterDiscount = totalAmountAfterDiscount;\n\n    switch (actionType) {\n      case 'printtoscreen':\n        //await PrinttoScreen(estimattedItem);\n        break;\n\n      case 'printtofile':\n        await PrinttoFile(estimattedItem);\n        break;\n\n      case 'printtopaper':\n        await PrinttoPaper(estimattedItem);\n        break;\n\n      case 'calculatetotalamount':\n        console.log(estimattedItem);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const calculateDiscountPrice = () => {\n    const item = estimattedItem.itemDetails;\n    let totalPrice = calculateTotalPrice(item.price, item.weight);\n    let discountPrice = totalPrice - totalPrice * discountItem.pricePercentage / 100;\n    return discountPrice;\n  };\n\n  const calculateTotalPrice = (price, weight) => {\n    const totalprice = parseFloat((price * weight).toFixed(2));\n    return totalprice;\n  };\n\n  const handleClear = () => {\n    setEstimattedItem(apiModel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    class: \"navbar navbar-inverse\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container-fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"navbar-header\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          class: \"navbar-brand\",\n          href: \"/\",\n          children: \"Estimation Screen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        class: \"nav navbar-nav navbar-right\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" Welcome \", customerDetails.type, \" User\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 2\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 1\n  }, this) // <div>\n  //   <label>Welcome {customerDetails.type} User</label>\n  //   <form onSubmit={(event)=>{event.preventDefault()}}>\n  //   <lable>\n  //     <p>Gold Price (per gram)</p>\n  //     <input\n  //       type=\"number\"\n  //       value={estimattedItem.itemDetails.price}\n  //       onChange={handlePriceInput}\n  //       placeholder=\"Enter Price\"\n  //       name=\"price\"\n  //       required\n  //     />\n  //   </lable>\n  //   <lable>\n  //     <p>Weight (grams)</p>\n  //     <input\n  //       type=\"number\"\n  //       value={estimattedItem.itemDetails.weight}\n  //       onChange={handleWeightInput}\n  //       placeholder=\"Enter Weight\"\n  //       name=\"weight\"\n  //       required\n  //     />\n  //   </lable>\n  //   <lable>\n  //     <p>Total Price</p>\n  //     <input\n  //       readOnly={true}\n  //       value={estimattedItem.itemDetails.totalPrice}\n  //       type=\"number\"\n  //       name=\"totalPrice\"\n  //     />\n  //   </lable>\n  //   {customerDetails && customerDetails.discountRule.itemVisible ? (\n  //     <lable>\n  //       <p>Discount %</p>\n  //       <input\n  //         type=\"number\"\n  //         name=\"pricePercentage\"\n  //         readOnly={customerDetails.discountRule.applicable}\n  //         value={customerDetails.discountRule.pricePercentage}\n  //       />\n  //     </lable>\n  //   ) : null}\n  //   <label>\n  //     <button type=\"button\" onClick={() => handleOperation(\"calculatetoamount\")}>\n  //       Calculate\n  //     </button>\n  //     <button type=\"submit\" onClick={() => handleOperation(\"printtoscreen\")}>\n  //       Print to Screen\n  //     </button>\n  //     <button type=\"button\" onClick={() => handleOperation(\"printtofile\")}>\n  //       Print to File\n  //     </button>\n  //     <button type=\"button\" onClick={() => handleOperation(\"printtopaper\")}>\n  //       Print to Paper\n  //     </button>\n  //     <button type=\"reset\" onClick={handleClear}>Clear</button>\n  //   </label>\n  //   </form>\n  // </div>\n  ;\n};\n\n_s(Estimation, \"/jXeGXO/j0YXgNva5ll3FCdNalI=\");\n\n_c = Estimation;\nexport default Estimation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Estimation\");","map":{"version":3,"sources":["E:/Programming/siemens-app-estimation/EstimationCalculator/web-store.client/src/components/PriceCalculator/Estimation.js"],"names":["useState","getCustomerDetails","PrinttoFile","PrinttoPaper","Estimation","customerDetails","discountItem","discountRule","apiModel","customerId","customerType","discountPercentage","totalAmountAfterDiscount","itemDetails","price","weight","totalPrice","estimattedItem","setEstimattedItem","handlePriceInput","event","prev","target","value","calculateTotalPrice","handleWeightInput","handleOperation","actionType","permissionToGetDiscount","applicable","calculateDiscountPrice","totalprice","id","type","pricePercentage","console","log","item","discountPrice","parseFloat","toFixed","handleClear"],"mappings":"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AAK,EAAC,iBAAX;AAAA,8BACE;AAAK,QAAA,KAAK,EAAC,eAAX;AAAA,+BACE;AAAG,UAAA,KAAK,EAAC,cAAT;AAAwB,UAAA,IAAI,EAAC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAI,QAAA,KAAK,EAAC,6BAAV;AAAA,+BACH;AAAA,kCAAgBH,eAAe,CAAC4B,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADE,CAcE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA7EF;AA+ED,CA3JC;;GAAM7B,U;;KAAAA,U;AA4JR,eAAeA,UAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { getCustomerDetails } from \"../../common/token.js\";\r\nimport {PrinttoFile,PrinttoPaper} from './EstimationAction'\r\n\r\n  const Estimation = () => {\r\n  const customerDetails = getCustomerDetails();\r\n  const discountItem=customerDetails.discountRule;\r\n  const apiModel={\r\n    customerId:'',\r\n    customerType:'',\r\n    discountPercentage:'',\r\n    totalAmountAfterDiscount:'',\r\n    itemDetails:{\r\n        price: '',\r\n        weight: '',\r\n        totalPrice: ''\r\n    }\r\n  };\r\n\r\n  const [estimattedItem, setEstimattedItem] = useState(apiModel);\r\n  const handlePriceInput = (event) => {\r\n    setEstimattedItem((prev) => ({\r\n        itemDetails:{\r\n            ...prev.itemDetails,\r\n            price: event.target.value,\r\n            totalPrice:calculateTotalPrice(event.target.value,estimattedItem.itemDetails.weight)\r\n        }\r\n    }));\r\n  };\r\n\r\n  const handleWeightInput = (event) => {\r\n  setEstimattedItem((prev) => ({\r\n    itemDetails:{\r\n        ...prev.itemDetails,\r\n        weight: event.target.value,\r\n        totalPrice:calculateTotalPrice(event.target.value,estimattedItem.itemDetails.price)\r\n    }\r\n}));\r\n};\r\n\r\n  const handleOperation = async(actionType) => {\r\n   const permissionToGetDiscount= customerDetails.discountRule.applicable;\r\n    const totalAmountAfterDiscount=permissionToGetDiscount?calculateDiscountPrice():estimattedItem.itemDetails.totalprice;\r\n    estimattedItem.customerId=customerDetails?.id;\r\n    estimattedItem.customerType=customerDetails?.type;\r\n    estimattedItem.discountPercentage=customerDetails.discountRule.pricePercentage;\r\n    estimattedItem.totalAmountAfterDiscount=totalAmountAfterDiscount;\r\n    switch(actionType){\r\n        case 'printtoscreen':\r\n          //await PrinttoScreen(estimattedItem);\r\n            break;\r\n            case 'printtofile':\r\n                await PrinttoFile(estimattedItem);\r\n                break;\r\n                case 'printtopaper':\r\n                    await PrinttoPaper(estimattedItem);\r\n                    break;\r\n                    case 'calculatetotalamount':\r\n                        console.log(estimattedItem);\r\n                        break;\r\n                        default:\r\n                            break;\r\n    }\r\n  };\r\n \r\n  const calculateDiscountPrice=()=>{\r\n    const item=estimattedItem.itemDetails;\r\n      let totalPrice=calculateTotalPrice(item.price,item.weight);\r\n      let discountPrice=totalPrice-((totalPrice*discountItem.pricePercentage)/100);\r\n      return  discountPrice; \r\n  }\r\n\r\n  const calculateTotalPrice=(price,weight)=>{\r\n    const totalprice= parseFloat((price * weight).toFixed(2));\r\n    return totalprice;\r\n  }\r\n  const handleClear=()=>{\r\n      setEstimattedItem(apiModel);\r\n  }\r\n\r\n  return (\r\n<nav class=\"navbar navbar-inverse\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"navbar-header\">\r\n      <a class=\"navbar-brand\" href=\"/\">Estimation Screen</a>\r\n    </div>\r\n    <ul class=\"nav navbar-nav navbar-right\">\r\n <span> Welcome {customerDetails.type} User</span>\r\n    </ul>\r\n  </div>\r\n</nav>\r\n\r\n\r\n\r\n    // <div>\r\n    //   <label>Welcome {customerDetails.type} User</label>\r\n    //   <form onSubmit={(event)=>{event.preventDefault()}}>\r\n    //   <lable>\r\n    //     <p>Gold Price (per gram)</p>\r\n    //     <input\r\n    //       type=\"number\"\r\n    //       value={estimattedItem.itemDetails.price}\r\n    //       onChange={handlePriceInput}\r\n    //       placeholder=\"Enter Price\"\r\n    //       name=\"price\"\r\n    //       required\r\n    //     />\r\n    //   </lable>\r\n\r\n    //   <lable>\r\n    //     <p>Weight (grams)</p>\r\n    //     <input\r\n    //       type=\"number\"\r\n    //       value={estimattedItem.itemDetails.weight}\r\n    //       onChange={handleWeightInput}\r\n    //       placeholder=\"Enter Weight\"\r\n    //       name=\"weight\"\r\n    //       required\r\n    //     />\r\n    //   </lable>\r\n    //   <lable>\r\n    //     <p>Total Price</p>\r\n    //     <input\r\n    //       readOnly={true}\r\n    //       value={estimattedItem.itemDetails.totalPrice}\r\n    //       type=\"number\"\r\n    //       name=\"totalPrice\"\r\n    //     />\r\n    //   </lable>\r\n    //   {customerDetails && customerDetails.discountRule.itemVisible ? (\r\n    //     <lable>\r\n    //       <p>Discount %</p>\r\n    //       <input\r\n    //         type=\"number\"\r\n    //         name=\"pricePercentage\"\r\n    //         readOnly={customerDetails.discountRule.applicable}\r\n    //         value={customerDetails.discountRule.pricePercentage}\r\n    //       />\r\n    //     </lable>\r\n    //   ) : null}\r\n    //   <label>\r\n    //     <button type=\"button\" onClick={() => handleOperation(\"calculatetoamount\")}>\r\n    //       Calculate\r\n    //     </button>\r\n    //     <button type=\"submit\" onClick={() => handleOperation(\"printtoscreen\")}>\r\n    //       Print to Screen\r\n    //     </button>\r\n    //     <button type=\"button\" onClick={() => handleOperation(\"printtofile\")}>\r\n    //       Print to File\r\n    //     </button>\r\n    //     <button type=\"button\" onClick={() => handleOperation(\"printtopaper\")}>\r\n    //       Print to Paper\r\n    //     </button>\r\n    //     <button type=\"reset\" onClick={handleClear}>Clear</button>\r\n    //   </label>\r\n    //   </form>\r\n      \r\n    // </div>\r\n  );\r\n};\r\nexport default Estimation;\r\n"]},"metadata":{},"sourceType":"module"}